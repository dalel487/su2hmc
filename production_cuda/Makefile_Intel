MF=Makefile_Intel
CC=		icc 
CXX=		icpc 
NVCC=		nvcc

IFLAGS=     -I../INCLUDE -I"${MKLROOT}/include" -I ./ -I../production_c\
				-I /opt/nvidia/hpc_sdk/Linux_x86_64/2024/cuda/include/ \
				-I /opt/nvidia/hpc_sdk/Linux_x86_64/2024/math_libs/include/ \

CFLAGS=  -qmkl -qopt-zmm-usage=high -MD -D__NVCC__ -static-intel -static-libgcc \
			-xSKYLAKE -ax'SKYLAKE-AVX512,CASCADELAKE,TIGERLAKE,COFFEELAKE,ALDERLAKE'\
			-DMKL_DIRECT_CALL -D__INTEL_MKL__ -D__RANLUX__ -qopenmp -qno-openmp-offload\
			-qopenmp-simd -DSA3AT -use-intel-optimized-headers $(IFLAGS) 

MKLFLAGS=	-qmkl -L${MKLROOT}/lib/intel64 -limf #-DUSE_MKL -DMKL_DIRECT_CALL -DMKL_ILP64
CULFLAGS=	-L/opt/nvidia/hpc_sdk/Linux_x86_64/2024/cuda/lib64/ \
				-L/opt/nvidia/hpc_sdk/Linux_x86_64/2024/math_libs/lib64/ \
				-lcuda -lcudart -lcublas #-L${NVSHMEM_HOME}/lib -lnvshmem -lblis 

LFLAGS=		-liomp5 -lstdc++ -lpthread -ldl -limf -lgsl  #${CULFLAGS}

NVCCFLAGS=	${IFLAGS}  -std=c++14 -err-no -w -expt-relaxed-constexpr 
			#Last flag is an experimental one used to call host functions in device code. Not sure
			#if it does what we want because the error message suggesting it came up when declaring
			#a11 and a12 in the Dslash routine
#NVCCFLAGS=	${IFLAGS}  -arch=compute_60 -code=sm_60,sm_61,sm_70,sm_75,sm_80,sm_86 -err-no -w \
#Replace first line of NVCCFLAGS with above when done. Targets every platform since 2016

EXE=	su2hmc_CUDA

CSRC_DIR=	../production_c
CSRC=	\
	    coord.c \
	    congrad.c \
		force.c \
    	random.c \
		par_mpi.c \
		bosonic.c\
		fermionic.c

CUSRC_DIR=	../production_cuda
CUSRC=	\
		cubosonic.cu\
		cumatrices.cu\
		cuforce.cu\
		cusu2hmc.cu

#CUSRC= CUDA_Compile.cu
CINC=	\
		su2hmc.h \
		sizes.h \
	    par_mpi.h \
    	random.h \
	    matrices.h \
    	coord.h \
	    errorcodes.h \

#
# No need to edit below this line
#

.SUFFIXES: .c .cu .h .hpp .o 
.PHONY: clean debug release profiler tar
C_SOURCES:= $(wildcard $(CSRC_DIR)/*.c)
CU_SOURCES:= $(wildcard $(CUSRC_DIR)/*.cu)
COBJ=	$(patsubst $(CSRC_DIR)/%.c, $(CSRC_DIR)/%.o, $(C_SOURCES))
CUOBJ= $(patsubst $(CUSRC_DIR)/%.cu, $(CUSRC_DIR)/%.o, $(CU_SOURCES))
CLIB= libc.a
CULIB= libcu.a
CULIB2= libcu2.a
#OBJ=	$(CLIB) $(CULIB2)
OBJ = $(COBJ) $(CUOBJ) 

#MOD=	$(CSRC:.c=.mod)
MOD=	
CEDT=	$(CSRC:.c=.c~)
CUEDT=	$(CUSRC:.cu=.cu~)
TMP=	$(MOD) $(CEDT) $(CUEDT) core

profiler:	CFLAGS += -g #-D_DEBUG
profiler:	NVCCFLAGS += -G -g -lineinfo  -keep
profiler:	release

release:	CFLAGS +=  -O3 -inline-level=2 -qopt-zmm-usage=high 
release:	NVCCFLAGS += -O3 -arch=sm_75 --maxrregcount=64
release:	$(EXE)

diagnostics: CFLAGS+=-DDIAGNOSTIC #-DNO_TIME #-DNO_SPACE
diagnostics: NVCCFLAGS+=-DDIAGNOSTIC #-DNO_TIME #-DNO_SPACE
diagnostics: debug

debug:		CFLAGS += -O0 -g -D_DEBUG -rdynamic 
debug:		NVCCFLAGS += -O0 -G -g -D_DEBUG  -arch=sm_75 --maxrregcount=255  -keep 
debug:		$(EXE)

		 
$(EXE): ../main.c $(OBJ)
	$(NVCC) $(NVCCFLAGS) -ccbin $(CC) -Xcompiler "$(CFLAGS) $(MKLFLAGS) -std=gnu11 -ipo" $^ $(LFLAGS) $(CULFLAGS)  -o $@
#$(CULIB2): $(CULIB)
#	ar rc $@ $^ 
#$(CULIB): $(CUOBJ)
#	$(NVCC) -ccbin $(CXX) $(NVCCFLAGS) -Xcompiler "$(CFLAGS) $(MKLFLAGS)" $(NVCCFLAGS)  $(LFLAGS) -dlink $^ -o $@ 
#$(CLIB):	$(COBJ) 
#	ar rc $@  $^
%.o: $(CUSRC_DIR)/%.cu
	$(NVCC) $(NVCCFLAGS) -ccbin $(CXX) -Xcompiler "$(CFLAGS) $(MKLFLAGS)" $^ -dc $@ 
%.o: $(CSRC_DIR)%.c
	$(CC) -std=gnu11 -ipo $(CFLAGS) $(MKLFLAGS) -c $^  

clean:
	rm -f $(OBJ) $(COBJ) $(CUOBJ) $(CULIB) $(CLIB) $(TMP) *.cpp?.ii *.cudafe1.* *.*bin *.fatbin.c *.ptx *.sm_* *.module_id\
	*dlink.* *.ltoir *.d i?_out

INP=	\
	midout \

tar:
	tar cvf $(EXE).tar $(MF) $(CSRC) $(CUSRC) $(CINC) $(CUINC) $(INP)
